blogdown::serve_site()
4+4
blogdown::serve_site()
servr::daemon_stop(2)
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
knit_with_parameters('~/Cositas/MyWebSide/content/post/2020-04-04-ConsReg-package.Rmd')
knitr::opts_chunk$set(
fig.width = 6.5,
fig.height = 3,
eval = if (isTRUE(exists("params"))) params$EVAL else FALSE
)
if (capabilities("cairo")) {
knitr::opts_chunk$set(
dev.args = list(png = list(type = "cairo"))
)
}
require(ConsReg)
require(ggplot2)
require(data.table)
data("fake_data")
fit1 = ConsReg(formula = y~x1+x2+x3+ I(x3^2) + x4, family = 'gaussian',
optimizer = 'solnp',
data = fake_data)
fit1$coefficients
coef(lm(y~x1+x2+x3+I(x3^2) + x4, data = fake_data))
fit1$metrics
forecast::gghistogram(fit1$residuals, add.normal = T, add.rug = T) +
theme_minimal()
fit2 = ConsReg(formula = y~x1+x2+x3+ I(x3^2) + x4, data = fake_data,
family = 'gaussian',
constraints = '(x3 + `I(x3^2)`) > .01, x4 < .2',
optimizer = 'mcmc',
LOWER = -1, UPPER = 1,
ini.pars.coef = c(-.4, .12, -.004, 0.1, 0.1, .15))
rbind(coef(fit1),
coef(fit2))
rbind(fit1$metrics,
fit2$metrics)
pred = data.frame(
fit1 = predict(fit1, newdata = fake_data[2:3,]),
fit2 = predict(fit2, newdata = fake_data[2:3,])
)
pred
pr = predict(fit2, components = T, newdata = fake_data[5,])
pr
data('series')
plot(series$y, t='l')
head(series)
fit_ts1 = ConsRegArima(y ~ -1, order = c(1, 1), data = series[1:60, ])
fit_ts1$coefficients
coef(arima(series$y[1:60], order = c(1, 0, 1), include.mean = F, method = 'CSS'))
fit_ts2 = ConsRegArima(y ~ x1+x2+x3+x4, order = c(1, 1), data = series[1:60,])
fit_ts3 = ConsRegArima(y ~ x1+x2+x3+x4, order = c(1, 1), data = series[1:60,],
LOWER = -1, UPPER = 1,
constraints = "x4 < x2",
ini.pars.coef = c(.9, .3, -.1, .3, -.3),
control = list(trace = 0) #  not show the trace of the optimizer
)
fit_ts3$coefficients
fit_ts4 = ConsRegArima(y ~ x1+x2+x3+x4, order = c(1, 1), data = series[1:60,],
LOWER = -1, UPPER = 1,
constraints = "x4 < x2",
penalty = 10000,
optimizer = 'GA', maxiter = 1000,
monitor = NULL, #  not show the trace of the optimizer
ini.pars.coef = c(.9, .2, 0, .3, -.6)
)
fit_ts4$coefficients
data.frame(
metrics = colnames(fit_ts1$metrics),
fit_ts1 = as.numeric(fit_ts1$metrics),
fit_ts2 = as.numeric(fit_ts2$metrics),
fit_ts3 = as.numeric(fit_ts3$metrics),
fit_ts4 = as.numeric(fit_ts4$metrics)
)
pred = predict(fit_ts4, newdata = series[61:63, ], h=3, intervals = 90)
pred$predict
plot(pred) + theme_minimal()
fit_ts5 = ConsRegArima(y ~ x1+x3+
shift(x3, 2) + # x2 from 2 periods above
x4,
order = c(1, 1), data = series[1:60,],
seasonal = list(order = c(1, 0), period = 4), # seasonal component
control = list(trace = 0)
)
pred = predict(fit_ts5, newdata = series[61:63,], origdata = series[1:60,])
pred$predict
ro = rolling(object = fit_ts3, used.sample = 50,
refit = 4, h = 4, orig.data = series)
plot(ro) + theme_minimal()
ro$results
plot(ro)
fn = function(x){
-3*x^4 - 4*x + 5
}
fn1 = function(x){
12*x^3 - 4
}
fn2 = function(x){
36*x^2
}
require(data.table)
#initalize x
x0 = 1
iter = 15
results = matrix(NA, nrow=iter, ncol=3)
for(i in 1:iter){
x1 = x0 - fn1(x0)/fn2(x0)
results[i,] = c(i, x0, x1)
# x0 will be equal to x1
x0 = x1
}
results = as.data.table(results)
names(results) = c('iteration','x0','x1')
xtable::xtable(results, digits = 6)
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
results %>%
melt(., id = 'iteration') %>%
ggplot(aes(x = iteration, y = value, color = variable)) +
geom_line(size = 1) + labs(x = 'Iteration', y = '', color = '') +
theme_minimal()
require(dplyr)
results %>%
melt(., id = 'iteration') %>%
ggplot(aes(x = iteration, y = value, color = variable)) +
geom_line(size = 1) + labs(x = 'Iteration', y = '', color = '') +
theme_minimal()
include_graphics('')
require(png)
require(knitr)
include_graphics('./content/about/profile.png')
```{r}
# All defaults
knitr::include_graphics('./content/about/profile.png')
```
```{r}
# All defaults
knitr::include_graphics('./content/about/profile.png')
```
# All defaults
knitr::include_graphics('./profile.png')
knitr::include_graphics('./profile.png')
knitr::include_graphics('./profile.png')
# All defaults
knitr::include_graphics('./profile.jpg')
# All defaults
knitr::include_graphics('./profile.jpg')
knitr::include_graphics('./profile.jpg')
# All defaults
knitr::include_graphics('./profile1.png')
# All defaults
knitr::include_graphics('./profile.png')
# All defaults
knitr::include_graphics('./profile2.png')
# All defaults
knitr::include_graphics('./profile2.png')
# All defaults
knitr::include_graphics('./profile2.png')
blogdown::serve_site()
set.seed(100)
x1 = rnorm(3000)
eta = -1.2 -1.1*x1 + 1.2*x2 + rnorm(3000)
p = 1/(1+exp(-eta))
y = rbinom(3000, 1, p)
set.seed(100)
x1 = rnorm(3000)
x2 = rnorm(3000)
eta = -1.2 -1.1*x1 + 1.2*x2 + rnorm(3000)
p = 1/(1+exp(-eta))
y = rbinom(3000, 1, p)
table(y)
mod = glm(y~x1+x2, family = binomial())
stargazer::stargazer(mod)
# First we define our X matrix. The first column is the intercept
X = cbind(1,x1,x2)
Likelihood = function(par){
par = matrix(par, nrow=1)
eta = X %*% t(par)
p = 1/(1 + exp(-eta))
# Likelihood function:
return( sum ( y * log(p) + (1-y) * log(1 - p)) )
}
require(numDeriv)
# Number of iterations
iters = 10
results = matrix(NA, nrow=iters+1, ncol=5)
x0 = rep(.5,3)
# Define alpha
alpha = .5
results[1,] = c(0, x0, Likelihood(x0))
for(i in 1:iters){
H = hessian(func = Likelihood, x0)
gradient = matrix(grad(Likelihood, x0), ncol=1, nrow=length(x0))
x1 = as.numeric(x0 - alpha * solve(H) %*% gradient)
results[i+1, ] = c(i, x1, Likelihood(x1))
x0 = x1
}
results = as.data.table(results)
names(results) = c('Iteration','Intercept','x1','x2','Likelihood')
results
print(logLik(mod))
print(mod$coefficients)
print(results[nrow(results),])
results %>%
dplyr::select('Iteration','Intercept','x1','x2') %>%
melt(., id = 'iteration') %>%
ggplot(aes(x = iteration, y = value, color = variable)) +
geom_line(size = 1) + labs(x = 'Iteration', y = '', color = '') +
theme_minimal() +
facet_wrap(~ variable, scales = 'free')
results %>%
dplyr::select('Iteration','Intercept','x1','x2') %>%
melt(., id = 'Iteration') %>%
ggplot(aes(x = Iteration, y = value, color = variable)) +
geom_line(size = 1) + labs(x = 'Iteration', y = '', color = '') +
theme_minimal() +
facet_wrap(~ variable, scales = 'free')
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
